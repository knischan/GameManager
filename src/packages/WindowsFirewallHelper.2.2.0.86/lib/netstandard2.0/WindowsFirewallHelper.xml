<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WindowsFirewallHelper</name>
    </assembly>
    <members>
        <member name="T:WindowsFirewallHelper.Addresses.DefaultGateway">
            <inheritdoc />
            <summary>
                A class representing default gateway as an address
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.DefaultGateway.AddressString">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.DefaultGateway.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.DefaultGateway" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.DefaultGateway" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.DefaultGateway.TryParse(System.String,WindowsFirewallHelper.Addresses.DefaultGateway@)">
            <summary>
                Determines whether a string is a valid default gateway address
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid default gateway address; otherwise,
                <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="address">The <see cref="T:WindowsFirewallHelper.Addresses.DefaultGateway" /> instance that represents the passed string.</param>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.DHCPService">
            <inheritdoc />
            <summary>
                A class representing a DHCP service as an address
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.DHCPService.AddressString">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.DHCPService.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.DHCPService" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.DHCPService" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.DHCPService.TryParse(System.String,WindowsFirewallHelper.Addresses.DHCPService@)">
            <summary>
                Determines whether a string is a valid DHCP service
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid DHCP service; otherwise, <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="service">The <see cref="T:WindowsFirewallHelper.Addresses.DHCPService" /> instance that represents the passed string.</param>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.DNSService">
            <inheritdoc />
            <summary>
                A class representing a DNS service as an address
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.DNSService.AddressString">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.DNSService.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.DNSService" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.DNSService" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.DNSService.TryParse(System.String,WindowsFirewallHelper.Addresses.DNSService@)">
            <summary>
                Determines whether a string is a valid DNS service
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid DNS service; otherwise, <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="service">The <see cref="T:WindowsFirewallHelper.Addresses.DNSService" /> instance that represents the passed string.</param>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.IPRange">
            <inheritdoc cref="T:WindowsFirewallHelper.IAddress" />
            <summary>
                A class representing a range of Internet Protocol addresses
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
                Creates an instance of the IPRange class using the provided values as the start and the end of the IP range
            </summary>
            <param name="address1">One end of the range</param>
            <param name="address2">Other end of the range</param>
            <exception cref="T:System.ArgumentException">Addresses should be of a same family</exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.#ctor(System.Net.IPAddress)">
            <summary>
                Creates an instance of the IPRange class using the provided value as both the start and the end of the IP range
            </summary>
            <param name="address">Both end of the range</param>
            <exception cref="T:System.ArgumentException">Addresses should be of a same family</exception>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.IPRange.EndAddress">
            <summary>
                Gets and sets the upper bound of the range
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.IPRange.StartAddress">
            <summary>
                Gets and sets the lower bound of the range
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.ToString">
            <summary>
                Returns a string that represents the current <see cref="T:WindowsFirewallHelper.Addresses.IPRange" />.
            </summary>
            <returns>
                A string that represents the current <see cref="T:WindowsFirewallHelper.Addresses.IPRange" />.
            </returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.Equals(WindowsFirewallHelper.Addresses.IPRange)">
            <summary>
                Compares two IP address ranges.
            </summary>
            <returns>
                <see langword="true" /> if the two address ranges are equal; otherwise, <see langword="false" />.
            </returns>
            <param name="other">An <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> instance to compare to the current instance. </param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.op_Equality(WindowsFirewallHelper.Addresses.IPRange,WindowsFirewallHelper.Addresses.IPRange)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> objects for equality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> object</param>
            <returns>true if two sides are equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.op_Inequality(WindowsFirewallHelper.Addresses.IPRange,WindowsFirewallHelper.Addresses.IPRange)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> objects for inequality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> object</param>
            <returns>true if two sides are not equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.TryParse(System.String,WindowsFirewallHelper.Addresses.IPRange@)">
            <summary>
                Determines whether a string is a valid IP address range.
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid IP address range; otherwise, <see langword="false" />
                .
            </returns>
            <param name="str">The string to validate.</param>
            <param name="addressRange">The <see cref="T:WindowsFirewallHelper.Addresses.IPRange" /> version of the string.</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.Equals(System.Object)">
            <summary>
                Compares two IP address ranges.
            </summary>
            <returns>
                <see langword="true" /> if the two address ranges are equal; otherwise, <see langword="false" />.
            </returns>
            <param name="obj">An <see cref="T:Object" /> instance to compare to the current instance. </param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.IPRange.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:WindowsFirewallHelper.Addresses.IPRange" />.
            </returns>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.LocalSubnet">
            <summary>
                A class representing local subnet as an address
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.LocalSubnet.AddressString">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.LocalSubnet.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.LocalSubnet" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.LocalSubnet" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.LocalSubnet.TryParse(System.String,WindowsFirewallHelper.Addresses.LocalSubnet@)">
            <summary>
                Determines whether a string is a valid local subnet address
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid local subnet address; otherwise,
                <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="service">The <see cref="T:WindowsFirewallHelper.Addresses.LocalSubnet" /> instance that represents the passed string.</param>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.NetworkAddress">
            <inheritdoc cref="T:WindowsFirewallHelper.IAddress" />
            <summary>
                A Class representing a range of Internet Protocol addresses using an <see cref="T:System.Net.IPAddress" /> and a
                Subnet Mask
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.NetworkAddress.IPv4SingleHostSubnet">
            <summary>
                Returns the single host subnet for IPv4 IPs (255.255.255.255)
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.NetworkAddress.IPv6SingleHostSubnet">
            <summary>
                Returns the single host subnet for IPv6 IPs (ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff)
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.#ctor(System.Net.IPAddress)">
            <summary>
                Creates an instance of the <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> class using an <see cref="T:System.Net.IPAddress" /> and
                255.255.255.255 or ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff as the Subnet Mask
            </summary>
            <param name="address">IPAddress to create an instance of <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> with</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
                Creates an instance of the <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> class using an <see cref="T:System.Net.IPAddress" /> and a Subnet Mask
            </summary>
            <param name="address">
                <see cref="T:System.Net.IPAddress" /> to be used as the base IPAddress of the <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" />
            </param>
            <param name="subnetMask">
                <see cref="T:System.Net.IPAddress" /> to be used as the Subnet Mask of the <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" />
            </param>
            <exception cref="T:System.ArgumentException">Addresses should be of a same family</exception>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.NetworkAddress.Address">
            <summary>
                Gets or sets the base <see cref="T:System.Net.IPAddress" /> in which this <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> is based on
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.NetworkAddress.EndAddress">
            <summary>
                Gets the calculated upper bound of the range
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.NetworkAddress.StartAddress">
            <summary>
                Gets the calculated lower bound of the range
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.NetworkAddress.SubnetMask">
            <summary>
                Gets or sets the Subnet Mask in which this <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> is based on
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.ToString">
            <summary>
                Returns a string that represents the current <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" />.
            </summary>
            <returns>
                A string that represents the current <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" />.
            </returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.Equals(WindowsFirewallHelper.Addresses.NetworkAddress)">
            <summary>
                Compares two network address.
            </summary>
            <returns>
                <see langword="true" /> if the two network address are equal; otherwise, <see langword="false" />.
            </returns>
            <param name="other">An <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> instance to compare to the current instance. </param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.op_Equality(WindowsFirewallHelper.Addresses.NetworkAddress,WindowsFirewallHelper.Addresses.NetworkAddress)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> objects for equality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> object</param>
            <returns>true if two sides are equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.op_Inequality(WindowsFirewallHelper.Addresses.NetworkAddress,WindowsFirewallHelper.Addresses.NetworkAddress)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> objects for inequality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> object</param>
            <returns>true if two sides are not equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.TryParse(System.String,WindowsFirewallHelper.Addresses.NetworkAddress@)">
            <summary>
                Determines whether a string is a valid network address.
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid network address; otherwise, <see langword="false" />
                .
            </returns>
            <param name="str">The string to validate.</param>
            <param name="addressNetwork">The <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" /> version of the string.</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.Equals(System.Object)">
            <summary>
                Compares two network addresses.
            </summary>
            <returns>
                <see langword="true" /> if the two network address are equal; otherwise, <see langword="false" />.
            </returns>
            <param name="obj">An <see cref="T:Object" /> instance to compare to the current instance. </param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.NetworkAddress.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:WindowsFirewallHelper.Addresses.NetworkAddress" />.
            </returns>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.SingleIP">
            <inheritdoc cref="T:WindowsFirewallHelper.IAddress" />
            <summary>
                A class representing an Internet Protocol address
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.Any">
            <summary>
                Provides an IP address that matches any IPAddress. This field is read-only.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.Broadcast">
            <summary>
                Provides the IP broadcast address. This field is read-only.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.IPv6Any">
            <summary>
                Provides an IP address that matches any IPv6 IPAddress. This field is read-only.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.IPv6Loopback">
            <summary>
                Provides the IP loopback address. This property is read-only.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.IPv6None">
            <summary>
                Obsolete - Provides an IP address that indicates that no IPv6 IPAddress is mentioned. This property is read-only.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.Loopback">
            <summary>
                Provides the IP loopback address. This field is read-only.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.Addresses.SingleIP.None">
            <summary>
                Obsolete - Provides an IP address that indicates that no IPAddress is mentioned. This property is read-only.
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.#ctor(System.Int64)">
            <summary>
                Creates a new instance of the SingleIP class with IP Address passed as an integer value.
            </summary>
            <param name="newAddress">Integer value of the IP Address</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.#ctor(System.Byte[])">
            <summary>
                Creates a new instance of the SingleIP class with IP Address passed as a <see langword="byte" /> array.
            </summary>
            <param name="address"><see langword="byte" /> array containing the IP Address</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.#ctor(System.Net.IPAddress)">
            <summary>
                Creates a new instance of the <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> class using the provided <see cref="T:System.Net.IPAddress" />.
            </summary>
            <param name="ip"></param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.ToString">
            <summary>
                Converts an Internet address to its standard notation.
            </summary>
            <returns>
                A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.
            </returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.Equals(System.Net.IPAddress)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.Equals(WindowsFirewallHelper.Addresses.SingleIP)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.IsLoopback(WindowsFirewallHelper.Addresses.SingleIP)">
            <summary>
                Indicates whether the specified IP address is the loopback address.
            </summary>
            <returns>
                true if <paramref name="address" /> is the loopback address; otherwise, false.
            </returns>
            <param name="address">An IP address. </param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.op_Equality(WindowsFirewallHelper.Addresses.SingleIP,WindowsFirewallHelper.Addresses.SingleIP)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> objects for equality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <returns>true if two sides are equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.op_Equality(WindowsFirewallHelper.Addresses.SingleIP,System.Net.IPAddress)">
            <summary>
                Compares one <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object with another <see cref="T:System.Net.IPAddress" /> object for equality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <param name="right">A <see cref="T:System.Net.IPAddress" /> object</param>
            <returns>true if two sides are equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.op_Equality(System.Net.IPAddress,WindowsFirewallHelper.Addresses.SingleIP)">
            <summary>
                Compares one <see cref="T:System.Net.IPAddress" /> object with another <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object for equality
            </summary>
            <param name="left">A <see cref="T:System.Net.IPAddress" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <returns>true if two sides are equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.op_Inequality(WindowsFirewallHelper.Addresses.SingleIP,WindowsFirewallHelper.Addresses.SingleIP)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> objects for inequality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <returns>true if two sides are not equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.op_Inequality(WindowsFirewallHelper.Addresses.SingleIP,System.Net.IPAddress)">
            <summary>
                Compares one <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object with another <see cref="T:System.Net.IPAddress" /> object for equality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <param name="right">A <see cref="T:System.Net.IPAddress" /> object</param>
            <returns>true if two sides are not equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.op_Inequality(System.Net.IPAddress,WindowsFirewallHelper.Addresses.SingleIP)">
            <summary>
                Compares one <see cref="T:System.Net.IPAddress" /> object with another <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object for equality
            </summary>
            <param name="left">A <see cref="T:System.Net.IPAddress" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object</param>
            <returns>true if two sides are not equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.Parse(System.String)">
            <summary>
                Converts an IP address string to an <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> instance.
            </summary>
            <returns>
                An <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> instance.
            </returns>
            <param name="ipString">
                A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal
                notation for IPv6.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="ipString" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="ipString" /> is not a valid IP address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.TryParse(System.String,System.Net.IPAddress@)">
            <summary>
                NOT SUPPORTED
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.TryParse(System.String,WindowsFirewallHelper.Addresses.SingleIP@)">
            <summary>
                Determines whether a string is a valid IP address.
            </summary>
            <returns>
                true if <paramref name="ipString" /> is a valid IP address; otherwise, false.
            </returns>
            <param name="ipString">The string to validate.</param>
            <param name="address">The <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> version of the string.</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SingleIP.ToIPAddress">
            <summary>
                Cast the current <see cref="T:WindowsFirewallHelper.Addresses.SingleIP" /> object to <see cref="T:System.Net.IPAddress" /> and returns it.
            </summary>
            <returns>Returns the corresponding <see cref="T:System.Net.IPAddress" /> object</returns>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.SpecialAddress">
            <inheritdoc cref="T:WindowsFirewallHelper.IAddress" />
            <summary>
                This class is the parent class of all special address values
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.SpecialAddress.AddressString">
            <summary>
                Should returns the constant value of the special address
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.ToString">
            <inheritdoc cref="T:WindowsFirewallHelper.IAddress" />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.Equals(WindowsFirewallHelper.Addresses.SpecialAddress)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.Equals(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.op_Equality(WindowsFirewallHelper.Addresses.SpecialAddress,WindowsFirewallHelper.Addresses.SpecialAddress)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> objects for equality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> object</param>
            <returns>true if two sides are equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.op_Inequality(WindowsFirewallHelper.Addresses.SpecialAddress,WindowsFirewallHelper.Addresses.SpecialAddress)">
            <summary>
                Compares two <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> objects for inequality
            </summary>
            <param name="left">A <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> object</param>
            <param name="right">A <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> object</param>
            <returns>true if two sides are not equal; otherwise false</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.TryParse(System.String,WindowsFirewallHelper.Addresses.SpecialAddress@)">
            <summary>
                Determines whether a string is a valid special service address.
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid special service address; otherwise,
                <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="specialAddress">The <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> version of the string.</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.Parse``1(System.String)">
            <summary>
                Converts an address string to an instance of one of children of the <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> class.
            </summary>
            <returns>
                An instance from one of children of the <see cref="T:WindowsFirewallHelper.Addresses.SpecialAddress" /> class.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.TryParse``1(System.String,``0@)">
            <summary>
                Determines whether a string is a valid address
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid address; otherwise, <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="service">The instance that represents the passed string.</param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.Equals(System.Object)">
            <summary>
                Compares address instances.
            </summary>
            <returns>
                <see langword="true" /> if the two instances are equal; otherwise, <see langword="false" />.
            </returns>
            <param name="obj">An <see cref="T:Object" /> instance to compare to the current instance. </param>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.SpecialAddress.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current instance.
            </returns>
        </member>
        <member name="T:WindowsFirewallHelper.Addresses.WINSService">
            <inheritdoc />
            <summary>
                A class representing a WINS service as an address
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Addresses.WINSService.AddressString">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.WINSService.Parse(System.String)">
            <summary>
                Converts an address string to a <see cref="T:WindowsFirewallHelper.Addresses.WINSService" /> instance.
            </summary>
            <returns>
                A <see cref="T:WindowsFirewallHelper.Addresses.WINSService" /> instance.
            </returns>
            <param name="str">
                A string that contains an address
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str" /> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="str" /> is not a valid address. </exception>
        </member>
        <member name="M:WindowsFirewallHelper.Addresses.WINSService.TryParse(System.String,WindowsFirewallHelper.Addresses.WINSService@)">
            <summary>
                Determines whether a string is a valid WINS service
            </summary>
            <returns>
                <see langword="true" /> if <paramref name="str" /> is a valid WINS service; otherwise, <see langword="false" />.
            </returns>
            <param name="str">The string to validate.</param>
            <param name="service">The <see cref="T:WindowsFirewallHelper.Addresses.WINSService" /> instance that represents the passed string.</param>
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.Remove(WindowsFirewallHelper.COMInterop.INetFwAuthorizedApplication)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.GetCollectionKey(WindowsFirewallHelper.COMInterop.INetFwAuthorizedApplication)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.GetEnumVariant">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.InternalAdd(WindowsFirewallHelper.COMInterop.INetFwAuthorizedApplication)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.InternalCount">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.InternalItem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyApplicationCollection.InternalRemove(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.Remove(WindowsFirewallHelper.COMInterop.INetFwOpenPort)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.GetCollectionKey(WindowsFirewallHelper.COMInterop.INetFwOpenPort)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.GetEnumVariant">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.InternalAdd(WindowsFirewallHelper.COMInterop.INetFwOpenPort)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.InternalCount">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.InternalItem(WindowsFirewallHelper.Collections.FirewallLegacyPortCollectionKey)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollection.InternalRemove(WindowsFirewallHelper.Collections.FirewallLegacyPortCollectionKey)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollectionKey.Equals(WindowsFirewallHelper.Collections.FirewallLegacyPortCollectionKey)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollectionKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyPortCollectionKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Add(WindowsFirewallHelper.IFirewallRule)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Contains(WindowsFirewallHelper.IFirewallRule)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.CopyTo(WindowsFirewallHelper.IFirewallRule[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Count">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Remove(WindowsFirewallHelper.IFirewallRule)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Item(System.UInt16,WindowsFirewallHelper.COMInterop.NetFwIPProtocol)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Remove(System.UInt16,WindowsFirewallHelper.COMInterop.NetFwIPProtocol)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyRulesCollection.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.GetCollectionKey(WindowsFirewallHelper.COMInterop.INetFwService)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.GetEnumVariant">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.InternalAdd(WindowsFirewallHelper.COMInterop.INetFwService)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.InternalCount">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.InternalItem(WindowsFirewallHelper.COMInterop.NetFwServiceType)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallLegacyServiceCollection.InternalRemove(WindowsFirewallHelper.COMInterop.NetFwServiceType)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.#ctor(WindowsFirewallHelper.COMInterop.INetFwProducts)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallProductsCollection.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.IndexOf(WindowsFirewallHelper.FirewallProduct)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.ConvertManagedToNative(WindowsFirewallHelper.FirewallProduct)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.ConvertNativeToManaged(WindowsFirewallHelper.COMInterop.INetFwProduct)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.GetCollectionKey(WindowsFirewallHelper.FirewallProduct)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.GetEnumVariant">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.InternalAdd(WindowsFirewallHelper.COMInterop.INetFwProduct)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.InternalCount">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.InternalItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallProductsCollection.InternalRemove(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.#ctor(WindowsFirewallHelper.COMInterop.INetFwRules)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.ConvertManagedToNative(`0)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.ConvertNativeToManaged(WindowsFirewallHelper.COMInterop.INetFwRule)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.GetCollectionKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.GetEnumVariant">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.InternalAdd(WindowsFirewallHelper.COMInterop.INetFwRule)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.InternalCount">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.InternalItem(System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.Collections.FirewallWASRulesCollection`1.InternalRemove(System.String)">
            <inheritdoc />
        </member>
        <member name="T:WindowsFirewallHelper.Collections.IFirewallLegacyRulesCollection">
            <summary>
                Represents a collection of firewall legacy rules containing both port based and application based rules
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Collections.IFirewallLegacyRulesCollection.Item(System.String)">
            <summary>
                Gets a legacy application rule
                Note: The rule returned by this method may not be complete or even correct if multiple rules meet the criteria. Use
                with caution.
            </summary>
            <param name="applicationPath">The rule's full application path</param>
            <returns>An instance of the <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallLegacyApplicationRule" /> class on success or null on failure</returns>
        </member>
        <member name="P:WindowsFirewallHelper.Collections.IFirewallLegacyRulesCollection.Item(System.UInt16,WindowsFirewallHelper.COMInterop.NetFwIPProtocol)">
            <summary>
                Gets a legacy port rule
                Note: The rule returned by this method may not be complete or even correct if multiple rules meet the criteria. Use
                with caution.
            </summary>
            <param name="portNumber">The rule's port number</param>
            <param name="protocol">The rule's protocol</param>
            <returns>An instance of the <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallLegacyPortRule" /> class on success or null on failure</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Collections.IFirewallLegacyRulesCollection.Remove(System.UInt16,WindowsFirewallHelper.COMInterop.NetFwIPProtocol)">
            <summary>
                Removes a legacy port rule using the port number and the protocol
            </summary>
            <param name="portNumber">The rule's port number</param>
            <param name="protocol">The rule's protocol</param>
            <returns>Returns a <see cref="T:System.Boolean" /> value indicating the success of the operation</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Collections.IFirewallLegacyRulesCollection.Remove(System.String)">
            <summary>
                Removes a legacy application rule using the full application path
            </summary>
            <param name="applicationPath">The rule's full application path</param>
            <returns>Returns a <see cref="T:System.Boolean" /> value indicating the success of the operation</returns>
        </member>
        <member name="T:WindowsFirewallHelper.Collections.IFirewallProductsCollection">
            <summary>
                Represents the collection of registered firewall products
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Collections.IFirewallProductsCollection.Item(System.Int32)">
            <summary>
                Gets the element at the specified index
            </summary>
            <param name="index">The zero-based index of the element to get</param>
            <returns>The element at the specified index</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Collections.IFirewallProductsCollection.IndexOf(WindowsFirewallHelper.FirewallProduct)">
            <summary>
                Determines the index of a specific item in the collection
            </summary>
            <param name="product">The element to get the collection index for</param>
            <returns>The index of product if found in the collection; otherwise, -1.</returns>
        </member>
        <member name="T:WindowsFirewallHelper.Collections.IFirewallWASRulesCollection`1">
            <summary>
                Represents a collection of firewall with advanced security rules
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.Collections.IFirewallWASRulesCollection`1.Item(System.String)">
            <summary>
                Gets a rule by name
                Note: The rule returned by this method is the first rule that meets the criteria. Use with caution.
            </summary>
            <param name="name">The rule's name</param>
            <returns>An instance of the <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallWASRule" /> class on success or null on failure</returns>
        </member>
        <member name="M:WindowsFirewallHelper.Collections.IFirewallWASRulesCollection`1.Remove(System.String)">
            <summary>
                Removes a rule by the name
            </summary>
            <param name="name">The rule's name</param>
            <returns>Returns a <see cref="T:System.Boolean" /> value indicating the success of the operation</returns>
        </member>
        <member name="T:WindowsFirewallHelper.COMTypeResolver">
            <summary>
                Contains methods facilitating access to local and remove COM+ types
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.COMTypeResolver.MachineName">
            <summary>
                Gets the machine name assigned to this instance or <see langword="null"/>
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.COMTypeResolver.#ctor(System.String)">
            <summary>
                Creates a new instance of <see cref="T:WindowsFirewallHelper.COMTypeResolver"/> allowing COM+ connection to remote machines
            </summary>
            <param name="machineName">The remote machine name or IP address</param>
        </member>
        <member name="M:WindowsFirewallHelper.COMTypeResolver.#ctor">
            <summary>
                Creates a new instance of <see cref="T:WindowsFirewallHelper.COMTypeResolver"/> providing COM+ connection to local machine
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.EdgeTraversalAction">
            <summary>
                Edge Traversal behavior
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.EdgeTraversalAction.Deny">
            <summary>
                Fully block application, service, or port to globally addressable and accessible from outside a NAT edge device.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.EdgeTraversalAction.Allow">
            <summary>
                Fully allow application, service, or port to globally addressable and accessible from outside a NAT edge device.
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.EdgeTraversalAction.DefferToApp">
            <summary>
                Application makes the decision to allow unsolicited traffic from the Internet through a network address translation
                (NAT) edge device
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.EdgeTraversalAction.DefferToUser">
            <summary>
                User makes the decision to allow unsolicited traffic from the Internet through a network address translation (NAT)
                edge device
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.Exceptions.FirewallLegacyNotSupportedException">
            <summary>
                The exception that is thrown when an invoked method or operation is not supported with the Windows Firewall Legacy
                API
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Exceptions.FirewallLegacyNotSupportedException.#ctor">
            <summary>
                Creates a new instance of the <see cref="T:WindowsFirewallHelper.Exceptions.FirewallLegacyNotSupportedException" /> class
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Exceptions.FirewallLegacyNotSupportedException.#ctor(System.String)">
            <summary>
                Creates a new instance of the <see cref="T:WindowsFirewallHelper.Exceptions.FirewallLegacyNotSupportedException" /> class with a string as the message
            </summary>
            <param name="message">A <see cref="T:System.String" /> to be used as the message of the exception</param>
        </member>
        <member name="T:WindowsFirewallHelper.Exceptions.FirewallWASInvalidProtocolException">
            <summary>
                The exception that is thrown when an operation is not supported with the selected <see cref="T:WindowsFirewallHelper.FirewallProtocol" />
                in the Windows Firewall With Advanced Security API
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Exceptions.FirewallWASInvalidProtocolException.#ctor(System.String)">
            <summary>
                Creates a new instance of the FirewallAPIv2InvalidProtocolException exception
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.Exceptions.FirewallWASNotSupportedException">
            <summary>
                The exception that is thrown when an invoked method or operation is not supported with the Windows Firewall With
                Advanced Security API
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Exceptions.FirewallWASNotSupportedException.#ctor">
            <summary>
                Creates a new instance of the <see cref="T:WindowsFirewallHelper.Exceptions.FirewallWASNotSupportedException" /> class
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.Exceptions.FirewallWASNotSupportedException.#ctor(System.String)">
            <summary>
                Creates a new instance of the <see cref="T:WindowsFirewallHelper.Exceptions.FirewallWASNotSupportedException" /> class with a string as the message
            </summary>
            <param name="message">A <see cref="T:System.String" /> to be used as the message of the exception</param>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallAction">
            <summary>
                Firewall rule actions
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAction.Block">
            <summary>
                Block rule
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAction.Allow">
            <summary>
                Allow rule
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallAPIVersion">
            <summary>
                Versions of API
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAPIVersion.None">
            <summary>
                Invalid or unknown version of API
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAPIVersion.FirewallLegacy">
            <summary>
                Windows Firewall Legacy API (Win XP+)
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAPIVersion.FirewallWAS">
            <summary>
                Windows Firewall With Advanced Security API (Windows Vista+)
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAPIVersion.FirewallWASWin7">
            <summary>
                Windows Firewall With Advanced Security API (Windows 7+)
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallAPIVersion.FirewallWASWin8">
            <summary>
                Windows Firewall With Advanced Security API (Windows 8+)
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallDirection">
            <summary>
                Firewall rule direction
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallDirection.Inbound">
            <summary>
                Inbound data
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallDirection.Outbound">
            <summary>
                Outbound data
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallLegacy">
            <summary>
                Contains properties and methods of Windows Firewall v1
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.#ctor">
            <summary>
                Creates a new instance of this class on the current thread for the local machine and leaves the cross thread control to the user of the
                class.
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.#ctor(WindowsFirewallHelper.COMTypeResolver)">
            <summary>
                Creates a new instance of this class on the current thread for a remote machine and leaves the cross thread control to the user of the
                class.
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.Reload">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.TypeResolver">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.Instance">
            <summary>
                Gets the current singleton instance of this class
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.IsLocallySupported">
            <summary>
                Gets a Boolean value showing if the firewall is supported locally
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.IsSupported(WindowsFirewallHelper.COMTypeResolver)">
            <summary>
                Gets a Boolean value showing if the firewall is supported remotely
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.Profiles">
            <summary>
                Gets the list of all available profiles of the firewall
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.Rules">
            <summary>
                Gets the list of all registered rules of the firewall
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreateApplicationRule(WindowsFirewallHelper.FirewallProfiles,System.String,WindowsFirewallHelper.FirewallAction,System.String,WindowsFirewallHelper.FirewallProtocol)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreateApplicationRule(WindowsFirewallHelper.FirewallProfiles,System.String,WindowsFirewallHelper.FirewallAction,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreateApplicationRule(WindowsFirewallHelper.FirewallProfiles,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreateApplicationRule(System.String,WindowsFirewallHelper.FirewallAction,System.String,WindowsFirewallHelper.FirewallProtocol)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreateApplicationRule(System.String,WindowsFirewallHelper.FirewallAction,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreateApplicationRule(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreatePortRule(WindowsFirewallHelper.FirewallProfiles,System.String,WindowsFirewallHelper.FirewallAction,System.UInt16,WindowsFirewallHelper.FirewallProtocol)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreatePortRule(WindowsFirewallHelper.FirewallProfiles,System.String,WindowsFirewallHelper.FirewallAction,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreatePortRule(WindowsFirewallHelper.FirewallProfiles,System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreatePortRule(System.String,WindowsFirewallHelper.FirewallAction,System.UInt16,WindowsFirewallHelper.FirewallProtocol)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreatePortRule(System.String,WindowsFirewallHelper.FirewallAction,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#CreatePortRule(System.String,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#GetActiveProfile">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#GetProfile(WindowsFirewallHelper.FirewallProfiles)">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.Name">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#Profiles">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacy.WindowsFirewallHelper#IFirewall#Rules">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.CreateApplicationRule(WindowsFirewallHelper.FirewallProfiles,System.String,System.String)">
            <summary>
                Creates a rule about an executable file (application) to be registered to a firewall profile
            </summary>
            <param name="profiles">The profile or profiles that the rule belongs to</param>
            <param name="name">Name of the rule</param>
            <param name="filename">Address of the executable file that the rule applies to</param>
            <returns>Returns the newly created <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallLegacyApplicationRule" /> instance</returns>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.CreateApplicationRule(System.String,System.String)">
            <summary>
                Creates a rule about an executable file (application) to be registered to the currently active firewall profile
            </summary>
            <param name="name">Name of the rule</param>
            <param name="filename">Address of the executable file that the rule applies to</param>
            <returns>Returns the newly created <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallLegacyApplicationRule" /> instance</returns>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.CreatePortRule(WindowsFirewallHelper.FirewallProfiles,System.String,System.UInt16)">
            <summary>
                Creates a rule about a TCP port to be registered to a firewall profile regardless of its protocol
            </summary>
            <param name="profiles">The profile that the rule belongs to</param>
            <param name="name">Name of the rule</param>
            <param name="portNumber">Port number that the rule applies to</param>
            <returns>Returns the newly created <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallLegacyPortRule" /> instance</returns>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.CreatePortRule(System.String,System.UInt16)">
            <summary>
                Creates a rule about a TCP port to be registered to the currently active firewall profile regardless of its
                protocol
            </summary>
            <param name="name">Name of the rule</param>
            <param name="portNumber">Port number that the rule applies to</param>
            <returns>Returns the newly created <see cref="T:WindowsFirewallHelper.FirewallRules.FirewallLegacyPortRule" /> instance</returns>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.GetActiveProfile">
            <summary>
                Returns the active firewall profile, if any
            </summary>
            <returns>
                The active firewall profile object or null if no firewall profile is currently active
            </returns>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacy.GetProfile(WindowsFirewallHelper.FirewallProfiles)">
            <summary>
                Returns a specific firewall profile
            </summary>
            <param name="profile">Requested firewall profile</param>
            <returns>Firewall profile object</returns>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallLegacyProfile">
            <inheritdoc />
            <summary>
                Contains properties of a Windows Firewall v1 profile
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.Rules">
            <summary>
                Gets the list of all firewall rules for this profile
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.WindowsFirewallHelper#IFirewallProfile#BlockAllInboundTraffic">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.WindowsFirewallHelper#IFirewallProfile#DefaultInboundAction">
            <inheritdoc />
            <exception cref="T:WindowsFirewallHelper.FirewallAPIv1.FirewallAPIv1NotSupportedException">
                Setting a value for this
                property is not supported
            </exception>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.WindowsFirewallHelper#IFirewallProfile#DefaultOutboundAction">
            <inheritdoc />
            <exception cref="T:WindowsFirewallHelper.FirewallAPIv1.FirewallAPIv1NotSupportedException">
                Setting a value for this
                property is not supported
            </exception>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.Enable">
            <inheritdoc />
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.IsActive">
            <inheritdoc />
            <summary>
                Gets a Boolean value showing if this firewall profile is the currently active profile.
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.ShowNotifications">
            <inheritdoc />
            <summary>
                Gets or sets a value indicating if the user should get notifications about rules of this profile
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.Type">
            <inheritdoc />
            <summary>
                Gets a FirewallProfiles showing the type of this firewall profile
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallLegacyProfile.UnicastResponsesToMulticastBroadcast">
            <inheritdoc />
            <summary>
                Gets or sets a value indicating if the firewall should send unicast responses to the multicast broadcasts
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallLegacyProfile.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallManager">
            <summary>
                A static class to manage the current active firewall
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallManager.Instance">
            <summary>
                Returns a instance of the active firewall
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if firewall API version is not supported.</exception>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallManager.TryGetInstance(WindowsFirewallHelper.IFirewall@)">
            <summary>
                Attempts to get an instance of the active firewall.
            </summary>
            <param name="instance">Outputs the active firewall instance, if successful.</param>
            <returns>Returns true if successful, otherwise false.</returns>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallManager.IsServiceRunning">
            <summary>
                Gets a Boolean value indicating if the firewall service is currently running
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallManager.RegisteredProducts">
            <summary>
                Returns the list of all registered third party firewalls
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if third party firewalls are not supported.</exception>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallManager.TryGetRegisteredProducts(WindowsFirewallHelper.Collections.IFirewallProductsCollection@)">
            <summary>
                Attempts to get the list of all registered third party firewalls.
            </summary>
            <param name="collection">Outputs the collection of third party firewalls, if successful.</param>
            <returns>Returns true if successful, otherwise false.</returns>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallManager.Version">
            <summary>
                Returns the API version of the current active Windows Firewall
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallManager.RegisterProduct(WindowsFirewallHelper.FirewallProduct,WindowsFirewallHelper.COMTypeResolver)">
            <summary>
                Register an instance of a third party firewall management class locally
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallManager.RegisterProduct(WindowsFirewallHelper.FirewallProduct)">
            <summary>
                Register an instance of a third party firewall management class remotely
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallManager.GetRegisteredProducts(WindowsFirewallHelper.COMTypeResolver)">
            <summary>
                Returns the list of all registered third party firewalls remotely
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown if third party firewalls are not supported.</exception>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallModifyStatePolicy">
            <summary>
                Firewall modify state policies
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallModifyStatePolicy.Ok">
            <summary>
                All modifications take effects immediately
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallModifyStatePolicy.OverrodeByGroupPolicy">
            <summary>
                Firewall is controlled by group policy
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallModifyStatePolicy.InboundBlocked">
            <summary>
                All inbound traffic is blocked regardless of registered rules
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallPortType">
            <summary>
                Firewall port types
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.All">
            <summary>
                All local ports
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.Specific">
            <summary>
                Specific list of local port numbers
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.RPCDynamicPorts">
            <summary>
                TCP Dynamic RPC port range
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.RPCEndpointMapper">
            <summary>
                TCP RPC endpoint mapper port range
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.IPHTTPS">
            <summary>
                TCP IP-HTTPS port (443)
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.EdgeTraversal">
            <summary>
                UDP Teredo traversed packets
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallPortType.PlayToDiscovery">
            <summary>
                UDP Play To Discovery packets
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallProduct">
            <summary>
                Represents a third party firewall product
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProduct.#ctor(System.String)">
            <summary>
                Creates a new <see cref="T:WindowsFirewallHelper.FirewallProduct" /> instance locally to be registered later
            </summary>
            <param name="name">The name of the product</param>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProduct.#ctor(System.String,WindowsFirewallHelper.COMTypeResolver)">
            <summary>
                Creates a new <see cref="T:WindowsFirewallHelper.FirewallProduct" /> instance remotely to be registered later
            </summary>
            <param name="name">The name of the product</param>
            <param name="typeResolver">The object resolver for COM+ objects</param>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProduct.FriendlyName">
            <summary>
                Gets the resolved name of this firewall product
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProduct.IsLocallySupported">
            <summary>
                Gets a Boolean value indicating if third party firewall product registration is locally available and supported
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProduct.IsSupported(WindowsFirewallHelper.COMTypeResolver)">
            <summary>
                Gets a Boolean value indicating if third party firewall product registration is remotely available and supported
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProduct.Name">
            <summary>
                Gets or sets the name of this firewall product
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProduct.TypeResolver">
            <summary>
                Gets the active COM+ Object resolver instance
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProduct.RuleCategories">
            <summary>
                Gets or sets the rule categories that this firewall product is capable of handling
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProduct.SignedExecutableFilename">
            <summary>
                Gets the address of signed executable file that is responsible for this firewall product functionalities
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProduct.GetCOMObject">
            <summary>
                Gets the underlying COM object for this firewall product
            </summary>
            <returns>The underlying COM object</returns>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallProductRegistrationHandle">
            <summary>
                Represents a firewall product registration handle; the registration will be removed when this object is released.
            </summary>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProductRegistrationHandle.IsInvalid">
            <summary>
                Returns a boolean value indicating if this instance contains a valid handle
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProductRegistrationHandle.Dispose">
            <inheritdoc />
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProductRegistrationHandle.Release">
            <summary>
                Releases the handle
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProductRegistrationHandle.Finalize">
            <inheritdoc />
        </member>
        <member name="T:WindowsFirewallHelper.FirewallProfiles">
            <summary>
                Firewall rule profile
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProfiles.Domain">
            <summary>
                Domain Profile
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProfiles.Private">
            <summary>
                Private Profile
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProfiles.Public">
            <summary>
                Public Profile
            </summary>
        </member>
        <member name="T:WindowsFirewallHelper.FirewallProtocol">
            <summary>
                A class representing a FirewallProtocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.Any">
            <summary>
                Matches both TCP and UDP protocols for port rules and all protocols for other type of rules
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.GRE">
            <summary>
                Generic Routing Encapsulation Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.HOPOPT">
            <summary>
                Hop-by-Hop Option Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.ICMPv4">
            <summary>
                Internet Control Message Protocol for IPv4
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.ICMPv6">
            <summary>
                Internet Control Message Protocol for IPv6
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.IGMP">
            <summary>
                Internet Group Management Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.IPv6">
            <summary>
                Internet Protocol Version 6
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.IPv6Frag">
            <summary>
                Internet Protocol Version 6 Fragmentation Header
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.IPv6NoNxt">
            <summary>
                Internet Protocol Version 6 No Next Header
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.IPv6Opts">
            <summary>
                Internet Protocol Version 6 Options Header
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.IPv6Route">
            <summary>
                Internet Protocol Version 6 Route Header
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.L2TP">
            <summary>
                Layer 2 Tunneling Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.PGM">
            <summary>
                Pragmatic General Multicast Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.TCP">
            <summary>
                Transmission Control Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.UDP">
            <summary>
                User Datagram Protocol
            </summary>
        </member>
        <member name="F:WindowsFirewallHelper.FirewallProtocol.VRRP">
            <summary>
                Virtual Router Redundancy Protocol
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProtocol.#ctor(System.Byte)">
            <summary>
                Creates a new <see cref="T:WindowsFirewallHelper.FirewallProtocol" /> based on the protocol number
            </summary>
            <param name="protocolNumber">The protocol number to create <see cref="T:WindowsFirewallHelper.FirewallProtocol" /> from</param>
        </member>
        <member name="P:WindowsFirewallHelper.FirewallProtocol.ProtocolNumber">
            <summary>
                Returns the underlying protocol number of this object
            </summary>
        </member>
        <member name="M:WindowsFirewallHelper.FirewallProtocol.Equals(WindowsFirewallHelper.FirewallProtocol)">
            <summary>
                Determines whether the specified<see cref="T:WindowsFirewallHelper.FirewallProtocol" /> is equal to the current
                <see cref="T:WindowsFirewallHelper.FirewallProtocol" />.
            </summary>
            <param name="other"> The object to compare with the current object.</param>
            <returns>
                true if the specified <see 